name: Build and Push vLLM Docker

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: registry.cn-beijing.aliyuncs.com
  IMAGE_NAME: yoce/vllm
  CUDA_VERSION: 12.1.1
  PYTHON_VERSION: 3.12
  # Disk space optimization
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # Set 6 hour timeout for vLLM compilation
    strategy:
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64

    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=cuda${{ env.CUDA_VERSION }}-py${{ env.PYTHON_VERSION }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Free disk space (comprehensive cleanup)
      run: |
        echo "=== Initial disk usage ==="
        df -h
        
        echo "=== Removing unnecessary packages and files ==="
        # Remove large packages and tools not needed for building
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules
        
        echo "=== Cleaning package cache ==="
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        
        echo "=== Docker cleanup ==="
        # More aggressive Docker cleanup
        docker system prune -af --volumes
        docker builder prune -af
        # Remove unused Docker images and containers
        docker image prune -af
        docker container prune -f
        
        echo "=== Clean pip and npm caches ==="
        sudo rm -rf ~/.cache/pip
        sudo rm -rf ~/.npm
        sudo rm -rf /tmp/*
        
        echo "=== Final disk usage ==="
        df -h

    - name: Monitor disk usage during build
      run: |
        # Start disk monitoring in background
        while true; do
          echo "$(date): Disk usage:"
          df -h | grep -E "(Filesystem|/dev/)"
          sleep 30
        done &
        echo $! > /tmp/disk_monitor.pid

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      timeout-minutes: 300  # 5 hour timeout specifically for build step
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: vllm-base
        build-args: |
          CUDA_VERSION=${{ env.CUDA_VERSION }}
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          max_jobs=1
          nvcc_threads=1
          VLLM_MAX_SIZE_MB=500
          RUN_WHEEL_CHECK=false
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,push=${{ github.event_name != 'pull_request' }}

    - name: Image digest
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        # Stop disk monitoring
        if [ -f /tmp/disk_monitor.pid ]; then
          kill $(cat /tmp/disk_monitor.pid) || true
          rm -f /tmp/disk_monitor.pid
        fi
        echo ${{ steps.build.outputs.digest }}

    - name: Final cleanup
      if: always()
      run: |
        # Final cleanup regardless of build result
        docker system prune -af --volumes || true
        df -h
